#!/usr/bin/env python3
from __future__ import print_function
from geniatagger import GeniaTagger
import sys
import socketserver
import argparse
import socket
import sys

import json


class TaggerTCPHandler(socketserver.StreamRequestHandler):

    def handle(self):
        for line in self.rfile:
            sent = str(line.strip(), 'utf-8')
            print("{} wrote: {}".format(self.client_address[0], sent))

            self.wfile.write(bytes(json.dumps(self.server.tagger.parse(sent)), 'utf-8'))


def tagger_client(port, sents):

    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    sock.connect(('localhost', port))
    try:
        for line in sents:
            line = line.strip()
            sock.sendall(bytes(line + "\n", "utf-8"))
            received = str(sock.recv(1024), "utf-8")
    finally:
        sock.close()

import fileinput


def main():
    parser = argparse.ArgumentParser(description="GeniaTagger python server")
    parser.add_argument('--port', '-p', default=9595, type=int)
    group = parser.add_mutually_exclusive_group(required=True)
    group.add_argument('--server', '-s', type=str, metavar='PATH_TO_TAGGER',
                       help='server mode. PATH_TO_TAGGER: path to geniatagger.', dest='tagger_path')
    group.add_argument('--client', '-c', nargs='*', help='client mode.', metavar='TEXT_FILE')

    options = parser.parse_args()
    print(options)
    if options.tagger_path:

        server = socketserver.TCPServer(('0.0.0.0', options.port), TaggerTCPHandler)
        server.tagger = GeniaTagger(options.tagger_path)
        server.serve_forever()
    else:

        tagger_client(options.port, fileinput.input(options.client))

if __name__ == '__main__':
    main()
